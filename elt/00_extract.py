import os
import requests
import logging
import json
import configparser

from datetime import datetime, timedelta, timezone, date, time

config = configparser.ConfigParser()
config.read('.env')

BASE_URL_SAMPLE_DATA = "https://api.openweathermap.org/data/2.5/weather"
BASE_URL_HISTORICAL_DATA = "https://api.openweathermap.org/data/2.5/onecall/timemachine"
API_KEY = config['envvars']["API_KEY"]

logging.basicConfig(level=logging.INFO)


def get_data_from_api(url: str, params: dict):
    return requests.get(url, params=params).json()


def write_file(content, path_file: str) -> None:
    with open(path_file, 'w') as f:
        f.write(content)


def get_date_from_unix_time(unix_time):
    return datetime.fromtimestamp(unix_time).strftime('%Y-%m-%d')


def get_days_ago_unix_time(days_ago):
    five_days_ago = date.today() - timedelta(days=days_ago)

    five_days_ago_unix_time = int(datetime.combine(
        five_days_ago, time(0, 0, 0), tzinfo=timezone.utc).timestamp())

    return five_days_ago_unix_time


def get_cities_weather_data(cities, day_unix_time):
    cities_with_weather_data = []

    for city, coord in cities.items():
        logging.info(
            f"Getting weather data of day {get_date_from_unix_time(day_unix_time)} of city {city}...")

        params = {
            "lat": coord["lat"],
            "lon": coord["lon"],
            "dt": day_unix_time,
            "appid": API_KEY
        }

        response = get_data_from_api(BASE_URL_HISTORICAL_DATA, params)

        cities_with_weather_data.append({city: response})

        logging.info(
            f"Weather data of day {get_date_from_unix_time(day_unix_time)} successfully recovered of city {city}!")

    logging.info(
        f"All weather data values for cities listed above were recovered.")

    return cities_with_weather_data


def get_cities_lat_long(cities: list, *args):
    cities_with_lat_lon = {}

    for city in cities:
        logging.info(f"Getting latitude and longitude of city {city}...")

        params = {
            "q": city,
            "appid": API_KEY
        }

        response = get_data_from_api(BASE_URL_SAMPLE_DATA, params)

        city_lat_long = response["coord"]
        cities_with_lat_lon.update({city: city_lat_long})

        logging.info(
            f"Latitude and longitude successfully recovered of city {city}!")

    logging.info(f"All latitude and longitude values were recovered.")

    return cities_with_lat_lon


def process_file(file: str, dir: str, source: str, data, days_ago=None):
    functions = {
        "sample": get_cities_lat_long,
        "weather": get_cities_weather_data
    }

    if file in os.listdir(dir):
        extracted_data = json.load(open(f"{dir}/{file}"))
    else:
        extracted_data = functions[source](data, days_ago)

        write_file(json.dumps(extracted_data), f"{dir}/{file}")

    return extracted_data


def _main():
    cities = [
        "Shenzhen", "Fez", "Rio De Janeiro", "Taipei", "SÃ£o Paulo", "Isfahan", "Warsaw",
        "Bengaluru", "Dar es Salaam", "Nagpur"
    ]  # list generated by https://www.randomlists.com/random-world-cities?dup=false&qty=10

    sample_file = "cities-lat-long.json"
    base_weather_data_file = "cities-weather-data"
    raw_dir = "data/01_raw"
    refined_dir = "data/02_refined"

    cities_with_lat_lon = process_file(sample_file, raw_dir, "sample", cities)

    historical_weather = []

    for days_ago in range(1, 6):
        logging.info(f"Getting weather data of {days_ago} days ago...")

        day_unix_time = get_days_ago_unix_time(days_ago)

        weather_data_file = f"{base_weather_data_file}_{day_unix_time}.json"

        day_weather = process_file(
            weather_data_file, refined_dir, "weather", cities_with_lat_lon, day_unix_time)

        historical_weather.append(day_weather)

    logging.info(f"All data successfully extracted!")


if __name__ == '__main__':
    _main()
